@model QuickChat.MVC.Models.Conversation

@{
    var categories = ViewBag.Categories as List<SelectListItem> ?? new();
}

<div class="card mb-4">
    <div class="card-body">
        <form method="post" asp-action="AssignCategoryInline" asp-controller="Agent" class="row g-2 align-items-center">
            <input type="hidden" name="ConversationId" value="@Model.Id" />

            <div class="col-auto">
                <label class="form-label mb-0 me-2"><strong>Kategoria:</strong></label>
            </div>
            <div class="col-auto">
                <select name="CategoryId" class="form-select">
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.Value" selected="@(Model.CategoryId == Guid.Parse(cat.Value) ? "selected" : null)">
                            @cat.Text
                        </option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Zapisz</button>
            </div>
        </form>
    </div>
</div>

<h5 class="mb-3">Rozmowa #@Model.Id</h5>

<div id="chatBox" class="border rounded p-3 mb-3 bg-light" style="height: 300px; overflow-y: auto;">
    @foreach (var msg in Model.Messages.OrderBy(m => m.Date))
    {
        <div class="mb-2">
            <span class="fw-bold text-primary">@(msg.SenderId != null ? "Agent" : "Klient"):</span>
            <span>@msg.Text</span>
        </div>
    }
</div>

<div class="input-group mb-3">
    <input type="text" id="messageInput" class="form-control" placeholder="Napisz wiadomość..." />
    <button onclick="sendMessage()" class="btn btn-success">Wyślij</button>
</div>

<form method="post" asp-action="CloseConversation" asp-controller="Agent" asp-route-id="@Model.Id">
    <button type="submit" class="btn btn-danger w-100">Zakończ rozmowę</button>
</form>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    const conversationId = "@Model.Id";

    connection.start().then(() => {
        connection.invoke("JoinConversation", conversationId);
        connection.invoke("MarkAsRead", conversationId, "agent");
    });

    connection.on("ReceiveMessage", (user, message) => {
        const msg = document.createElement("div");
        msg.classList.add("mb-2");
        msg.innerHTML = "<span class='fw-bold text-success'>" + user + ":</span> " + message;
        const chatBox = document.getElementById("chatBox");
        chatBox.appendChild(msg);
        chatBox.scrollTop = chatBox.scrollHeight;
    });

    function sendMessage() {
        const input = document.getElementById("messageInput");
        const msg = input.value.trim();
        if (!msg) return;

        connection.invoke("SendMessage", conversationId, "Agent", msg);
        input.value = "";
    }
</script>
